#---------------------------------------------------------------------
# CISS465 Project 3 - Jesse and Nate
#---------------------------------------------------------------------

CAVE_NUMBERS = 20

import random
import Cave

def cave_generation(cave_list, cave_list_copy, cave_check, game_start):

        
    # List containing all the Locations for caves
    point_list = []

    for i in range (CAVE_NUMBERS):
        point_list.append(i + 1)

    # Loop to add caves to cave_list
    for i in range (CAVE_NUMBERS):
        cave = Cave.Cave()
        cave_list.append(cave)
        
    # Loop to go through cave_list and assign it a random value from
    # the point_list, then removes that value from the point_list
    for i in range (CAVE_NUMBERS):
        cave_list[i].set_value(random.choice(point_list))
        point_list.remove(cave_list[i].get_value())
        
    cave_list_copy += cave_list
            
    # Set up some initial connections
    for item in cave_list:
        while(item.is_connection_empty == True):
            random_cave = random.choice(cave_list_copy)
            if (random_cave.get_value() == item.get_value()):
                continue
            if (random_cave.is_connection_full == True):
                continue
            if (random_cave.is_connection_empty() == False):
                if (random_cave.get_value() not in item.get_connection()):
                    item.add_connection(random_cave.get_value())
                    random_cave.add_connection(item.get_value())

# If cave is full on connections, remove it from list of random_cave choices
    for item in cave_list:
        if (item.is_connection_full()):
            cave_list_copy.remove(item)

    for item in cave_list_copy:
        while (item.is_connection_full() == False):
            random_cave = random.choice(cave_list_copy)
            if (random_cave.get_value() == item.get_value()):
                continue
            if (random_cave.is_connection_full() == True):
                cave_list_copy.remove(random_cave)
                continue
            else:
                if (random_cave.get_value() not in item.get_connection()):
                    item.add_connection(random_cave.get_value())
                    random_cave.add_connection(item.get_value())

    for item in cave_list:
        if (item.is_connection_full() == False):
            cave_check.append(item)

    counter = 0
    for item in cave_check:
        while (item.is_connection_full() == False):
            if (counter > 500):
                game_start = False
                break
            random_cave = random.choice(cave_check)
            if (random_cave.get_value() == item.get_value()):
                counter = counter + 1
                continue
            if (random_cave.is_connection_full() == True):
                continue
            elif (random_cave.get_value() not in item.get_connection()):
                item.add_connection(random_cave.get_value())
                random_cave.add_connection(item.get_value())
                
    game_start = True


# List containing all the Caves
cave_list = []
cave_check = []
cave_list_copy = []
game_start = False

# Put inside a loop to generate until it works
while (game_start == False):
    cave_generation(cave_list, cave_list_copy, cave_check, game_start)


print("Cave List Print")
# Test print to see Cave Objects Values/(other variabes in the future)
for item in cave_list:
    print(item)
